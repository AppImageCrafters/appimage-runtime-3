#define CATCH_CONFIG_MAIN  // This tells Catch to provide a main() - only do this in one cpp file
#include <catch2/catch.hpp>

#include <appimage/type3/appimage-header.h>

/**
 * Example header, crafted by hand following the initial draft of the AppImage header format.
 * Contains some random values only relevant for testing the struct's interface.
 */
const uint8_t example_header[] = {
    // Size of the entire header, including dynamic fields (4 bytes)
    20, 0, 0, 0,
    // AppImage type (1 byte), payload type (1 byte), header revision 1
    3, 14, 0, 1,
    // Update information offset (2 bytes), length (2 bytes)
    31, 0, 127, 1,
    // Signature section offset (2 bytes), length (2 bytes)
    13, 0, 199, 2,
    // Signature type, padding on the end (2 bytes)
    23, 0, 0, 0,
};

TEST_CASE("Test empty example header compliance", "[AppImage header]") {
    // ensure that the empty example header has the same size as a "vanilla" header struct
    // this way we ensure the hand-crafted header has the same size it would have if generated by serializing the
    // struct
    REQUIRE(sizeof(appimage_header) == sizeof(example_header));

    const auto aih = reinterpret_cast<const appimage_header*>(example_header);
    REQUIRE(aih->appimage_header_size == 20);
    REQUIRE(sizeof(appimage_header) == 20);
    REQUIRE(aih->appimage_type == 3);
    REQUIRE(aih->payload_type == 14);
    REQUIRE(aih->update_information_offset == 31);
    REQUIRE(aih->update_information_len == 127 + (1U << 8));
    REQUIRE(aih->signature_offset == 13);
    REQUIRE(aih->signature_len == 199 + (2U << 8));
    REQUIRE(aih->signature_type == 23);
}
